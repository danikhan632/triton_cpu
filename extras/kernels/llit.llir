; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

define void @matmul(ptr %0, ptr %1, i64 %2, i64 %3, i64 %4, i64 %5, i64 %6, ptr %7, ptr %8, i64 %9, i64 %10, i64 %11, i64 %12, i64 %13, ptr %14, ptr %15, i64 %16, i64 %17, i64 %18, i64 %19, i64 %20) #0 {
  %22 = insertvalue { ptr, ptr, i64, [2 x i64], [2 x i64] } undef, ptr %0, 0
  %23 = insertvalue { ptr, ptr, i64, [2 x i64], [2 x i64] } %22, ptr %1, 1
  %24 = insertvalue { ptr, ptr, i64, [2 x i64], [2 x i64] } %23, i64 %2, 2
  %25 = insertvalue { ptr, ptr, i64, [2 x i64], [2 x i64] } %24, i64 %3, 3, 0
  %26 = insertvalue { ptr, ptr, i64, [2 x i64], [2 x i64] } %25, i64 %5, 4, 0
  %27 = insertvalue { ptr, ptr, i64, [2 x i64], [2 x i64] } %26, i64 %4, 3, 1
  %28 = insertvalue { ptr, ptr, i64, [2 x i64], [2 x i64] } %27, i64 %6, 4, 1
  %29 = insertvalue { ptr, ptr, i64, [2 x i64], [2 x i64] } undef, ptr %7, 0
  %30 = insertvalue { ptr, ptr, i64, [2 x i64], [2 x i64] } %29, ptr %8, 1
  %31 = insertvalue { ptr, ptr, i64, [2 x i64], [2 x i64] } %30, i64 %9, 2
  %32 = insertvalue { ptr, ptr, i64, [2 x i64], [2 x i64] } %31, i64 %10, 3, 0
  %33 = insertvalue { ptr, ptr, i64, [2 x i64], [2 x i64] } %32, i64 %12, 4, 0
  %34 = insertvalue { ptr, ptr, i64, [2 x i64], [2 x i64] } %33, i64 %11, 3, 1
  %35 = insertvalue { ptr, ptr, i64, [2 x i64], [2 x i64] } %34, i64 %13, 4, 1
  %36 = insertvalue { ptr, ptr, i64, [2 x i64], [2 x i64] } undef, ptr %14, 0
  %37 = insertvalue { ptr, ptr, i64, [2 x i64], [2 x i64] } %36, ptr %15, 1
  %38 = insertvalue { ptr, ptr, i64, [2 x i64], [2 x i64] } %37, i64 %16, 2
  %39 = insertvalue { ptr, ptr, i64, [2 x i64], [2 x i64] } %38, i64 %17, 3, 0
  %40 = insertvalue { ptr, ptr, i64, [2 x i64], [2 x i64] } %39, i64 %19, 4, 0
  %41 = insertvalue { ptr, ptr, i64, [2 x i64], [2 x i64] } %40, i64 %18, 3, 1
  %42 = insertvalue { ptr, ptr, i64, [2 x i64], [2 x i64] } %41, i64 %20, 4, 1
  %43 = call i64 @llvm.vscale.i64()
  %44 = mul i64 %43, 4
  br label %45

45:                                               ; preds = %169, %21
  %46 = phi i64 [ %170, %169 ], [ 0, %21 ]
  %47 = icmp slt i64 %46, %3
  br i1 %47, label %48, label %171

48:                                               ; preds = %45
  %49 = sub i64 %3, %46
  %50 = icmp slt i64 %49, %44
  %51 = select i1 %50, i64 %49, i64 %44
  br label %52

52:                                               ; preds = %167, %48
  %53 = phi i64 [ %168, %167 ], [ 0, %48 ]
  %54 = icmp slt i64 %53, %11
  br i1 %54, label %55, label %169

55:                                               ; preds = %52
  %56 = sub i64 %11, %53
  %57 = icmp slt i64 %56, %44
  %58 = select i1 %57, i64 %56, i64 %44
  br label %59

59:                                               ; preds = %165, %55
  %60 = phi i64 [ %166, %165 ], [ 0, %55 ]
  %61 = icmp slt i64 %60, %4
  br i1 %61, label %62, label %167

62:                                               ; preds = %59
  %63 = insertvalue { ptr, ptr, i64 } undef, ptr %0, 0
  %64 = insertvalue { ptr, ptr, i64 } %63, ptr %1, 1
  %65 = insertvalue { ptr, ptr, i64 } %64, i64 0, 2
  %66 = mul i64 %46, %5
  %67 = add i64 %2, %66
  %68 = mul i64 %60, %6
  %69 = add i64 %67, %68
  %70 = insertvalue { ptr, ptr, i64 } undef, ptr %7, 0
  %71 = insertvalue { ptr, ptr, i64 } %70, ptr %8, 1
  %72 = insertvalue { ptr, ptr, i64 } %71, i64 0, 2
  %73 = mul i64 %60, %12
  %74 = add i64 %9, %73
  %75 = mul i64 %53, %13
  %76 = add i64 %74, %75
  %77 = insertvalue { ptr, ptr, i64 } undef, ptr %14, 0
  %78 = insertvalue { ptr, ptr, i64 } %77, ptr %15, 1
  %79 = insertvalue { ptr, ptr, i64 } %78, i64 0, 2
  %80 = mul i64 %46, %19
  %81 = add i64 %16, %80
  %82 = mul i64 %53, %20
  %83 = add i64 %81, %82
  %84 = insertvalue { ptr, ptr, i64, [2 x i64], [2 x i64] } undef, ptr %14, 0
  %85 = insertvalue { ptr, ptr, i64, [2 x i64], [2 x i64] } %84, ptr %15, 1
  %86 = insertvalue { ptr, ptr, i64, [2 x i64], [2 x i64] } %85, i64 %83, 2
  %87 = insertvalue { ptr, ptr, i64, [2 x i64], [2 x i64] } %86, i64 %51, 3, 0
  %88 = insertvalue { ptr, ptr, i64, [2 x i64], [2 x i64] } %87, i64 %19, 4, 0
  %89 = insertvalue { ptr, ptr, i64, [2 x i64], [2 x i64] } %88, i64 %58, 3, 1
  %90 = insertvalue { ptr, ptr, i64, [2 x i64], [2 x i64] } %89, i64 %20, 4, 1
  %91 = call <vscale x 4 x i32> @llvm.experimental.stepvector.nxv4i32()
  %92 = trunc i64 %51 to i32
  %93 = insertelement <vscale x 4 x i32> undef, i32 %92, i32 0
  %94 = shufflevector <vscale x 4 x i32> %93, <vscale x 4 x i32> undef, <vscale x 4 x i32> zeroinitializer
  %95 = icmp slt <vscale x 4 x i32> %91, %94
  %96 = insertvalue { ptr, ptr, i64, [1 x i64], [1 x i64] } undef, ptr %0, 0
  %97 = insertvalue { ptr, ptr, i64, [1 x i64], [1 x i64] } %96, ptr %1, 1
  %98 = insertvalue { ptr, ptr, i64, [1 x i64], [1 x i64] } %97, i64 %69, 2
  %99 = insertvalue { ptr, ptr, i64, [1 x i64], [1 x i64] } %98, i64 %51, 3, 0
  %100 = insertvalue { ptr, ptr, i64, [1 x i64], [1 x i64] } %99, i64 %5, 4, 0
  br label %101

101:                                              ; preds = %113, %62
  %102 = phi i64 [ %115, %113 ], [ 0, %62 ]
  %103 = phi <vscale x 4 x float> [ %114, %113 ], [ zeroinitializer, %62 ]
  %104 = icmp slt i64 %102, %44
  br i1 %104, label %105, label %116

105:                                              ; preds = %101
  %106 = extractelement <vscale x 4 x i1> %95, i64 %102
  br i1 %106, label %107, label %113

107:                                              ; preds = %105
  %108 = getelementptr float, ptr %1, i64 %69
  %109 = mul i64 %102, %5
  %110 = getelementptr float, ptr %108, i64 %109
  %111 = load float, ptr %110, align 4
  %112 = insertelement <vscale x 4 x float> %103, float %111, i64 %102
  br label %113

113:                                              ; preds = %107, %105
  %114 = phi <vscale x 4 x float> [ %112, %107 ], [ %103, %105 ]
  %115 = add i64 %102, 1
  br label %101

116:                                              ; preds = %101
  %117 = trunc i64 %58 to i32
  %118 = insertelement <vscale x 4 x i32> undef, i32 %117, i32 0
  %119 = shufflevector <vscale x 4 x i32> %118, <vscale x 4 x i32> undef, <vscale x 4 x i32> zeroinitializer
  %120 = icmp slt <vscale x 4 x i32> %91, %119
  %121 = insertvalue { ptr, ptr, i64, [1 x i64], [1 x i64] } undef, ptr %7, 0
  %122 = insertvalue { ptr, ptr, i64, [1 x i64], [1 x i64] } %121, ptr %8, 1
  %123 = insertvalue { ptr, ptr, i64, [1 x i64], [1 x i64] } %122, i64 %76, 2
  %124 = insertvalue { ptr, ptr, i64, [1 x i64], [1 x i64] } %123, i64 %58, 3, 0
  %125 = insertvalue { ptr, ptr, i64, [1 x i64], [1 x i64] } %124, i64 %13, 4, 0
  br label %126

126:                                              ; preds = %138, %116
  %127 = phi i64 [ %140, %138 ], [ 0, %116 ]
  %128 = phi <vscale x 4 x float> [ %139, %138 ], [ zeroinitializer, %116 ]
  %129 = icmp slt i64 %127, %44
  br i1 %129, label %130, label %141

130:                                              ; preds = %126
  %131 = extractelement <vscale x 4 x i1> %120, i64 %127
  br i1 %131, label %132, label %138

132:                                              ; preds = %130
  %133 = getelementptr float, ptr %8, i64 %76
  %134 = mul i64 %127, %13
  %135 = getelementptr float, ptr %133, i64 %134
  %136 = load float, ptr %135, align 4
  %137 = insertelement <vscale x 4 x float> %128, float %136, i64 %127
  br label %138

138:                                              ; preds = %132, %130
  %139 = phi <vscale x 4 x float> [ %137, %132 ], [ %128, %130 ]
  %140 = add i64 %127, 1
  br label %126

141:                                              ; preds = %126
  call void @llvm.aarch64.sme.zero(i32 17)
  br label %142

142:                                              ; preds = %145, %141
  %143 = phi i64 [ %152, %145 ], [ 0, %141 ]
  %144 = icmp slt i64 %143, %51
  br i1 %144, label %145, label %153

145:                                              ; preds = %142
  %146 = getelementptr float, ptr %15, i64 %83
  %147 = mul i64 %143, %19
  %148 = mul i64 %20, 0
  %149 = add i64 %147, %148
  %150 = getelementptr float, ptr %146, i64 %149
  %151 = trunc i64 %143 to i32
  call void @llvm.aarch64.sme.ld1w.horiz(<vscale x 4 x i1> %120, ptr %150, i32 0, i32 %151)
  %152 = add i64 %143, 1
  br label %142

153:                                              ; preds = %142
  call void @llvm.aarch64.sme.mopa.nxv4f32(i32 0, <vscale x 4 x i1> %95, <vscale x 4 x i1> %120, <vscale x 4 x float> %103, <vscale x 4 x float> %128)
  br label %154

154:                                              ; preds = %157, %153
  %155 = phi i64 [ %164, %157 ], [ 0, %153 ]
  %156 = icmp slt i64 %155, %51
  br i1 %156, label %157, label %165

157:                                              ; preds = %154
  %158 = getelementptr float, ptr %15, i64 %83
  %159 = mul i64 %155, %19
  %160 = mul i64 %20, 0
  %161 = add i64 %159, %160
  %162 = getelementptr float, ptr %158, i64 %161
  %163 = trunc i64 %155 to i32
  call void @llvm.aarch64.sme.st1w.horiz(<vscale x 4 x i1> %120, ptr %162, i32 0, i32 %163)
  %164 = add i64 %155, 1
  br label %154

165:                                              ; preds = %154
  %166 = add i64 %60, 1
  br label %59

167:                                              ; preds = %59
  %168 = add i64 %53, %44
  br label %52

169:                                              ; preds = %52
  %170 = add i64 %46, %44
  br label %45

171:                                              ; preds = %45
  ret void
}

; Function Attrs: nocallback nofree nosync nounwind willreturn memory(none)
declare i64 @llvm.vscale.i64() #1

; Function Attrs: nocallback nofree nosync nounwind willreturn memory(none)
declare <vscale x 4 x i32> @llvm.experimental.stepvector.nxv4i32() #1

; Function Attrs: nocallback nofree nosync nounwind willreturn
declare void @llvm.aarch64.sme.zero(i32 immarg) #2

; Function Attrs: nocallback nofree nosync nounwind willreturn
declare void @llvm.aarch64.sme.mopa.nxv4f32(i32 immarg, <vscale x 4 x i1>, <vscale x 4 x i1>, <vscale x 4 x float>, <vscale x 4 x float>) #2

; Function Attrs: nocallback nofree nosync nounwind willreturn
declare void @llvm.aarch64.sme.st1w.horiz(<vscale x 4 x i1>, ptr, i32 immarg, i32) #2

; Function Attrs: nocallback nofree nosync nounwind willreturn
declare void @llvm.aarch64.sme.ld1w.horiz(<vscale x 4 x i1>, ptr, i32 immarg, i32) #2

attributes #0 = { "aarch64_pstate_sm_body" "aarch64_pstate_za_new" }
attributes #1 = { nocallback nofree nosync nounwind willreturn memory(none) }
attributes #2 = { nocallback nofree nosync nounwind willreturn }

!llvm.module.flags = !{!0}

!0 = !{i32 2, !"Debug Info Version", i32 3}