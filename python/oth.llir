; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@__constant_7x13xf32 = private constant [7 x [13 x float]] [[13 x float] [float 1.000000e+00, float 8.000000e+00, float 1.500000e+01, float 2.200000e+01, float 2.900000e+01, float 3.600000e+01, float 4.300000e+01, float 5.000000e+01, float 5.700000e+01, float 6.400000e+01, float 7.100000e+01, float 7.800000e+01, float 8.500000e+01], [13 x float] [float 2.000000e+00, float 9.000000e+00, float 1.600000e+01, float 2.300000e+01, float 3.000000e+01, float 3.700000e+01, float 4.400000e+01, float 5.100000e+01, float 5.800000e+01, float 6.500000e+01, float 7.200000e+01, float 7.900000e+01, float 8.600000e+01], [13 x float] [float 3.000000e+00, float 1.000000e+01, float 1.700000e+01, float 2.400000e+01, float 3.100000e+01, float 3.800000e+01, float 4.500000e+01, float 5.200000e+01, float 5.900000e+01, float 6.600000e+01, float 7.300000e+01, float 8.000000e+01, float 8.700000e+01], [13 x float] [float 4.000000e+00, float 1.100000e+01, float 1.800000e+01, float 2.500000e+01, float 3.200000e+01, float 3.900000e+01, float 4.600000e+01, float 5.300000e+01, float 6.000000e+01, float 6.700000e+01, float 7.400000e+01, float 8.100000e+01, float 8.800000e+01], [13 x float] [float 5.000000e+00, float 1.200000e+01, float 1.900000e+01, float 2.600000e+01, float 3.300000e+01, float 4.000000e+01, float 4.700000e+01, float 5.400000e+01, float 6.100000e+01, float 6.800000e+01, float 7.500000e+01, float 8.200000e+01, float 8.900000e+01], [13 x float] [float 6.000000e+00, float 1.300000e+01, float 2.000000e+01, float 2.700000e+01, float 3.400000e+01, float 4.100000e+01, float 4.800000e+01, float 5.500000e+01, float 6.200000e+01, float 6.900000e+01, float 7.600000e+01, float 8.300000e+01, float 9.000000e+01], [13 x float] [float 7.000000e+00, float 1.400000e+01, float 2.100000e+01, float 2.800000e+01, float 3.500000e+01, float 4.200000e+01, float 4.900000e+01, float 5.600000e+01, float 6.300000e+01, float 7.000000e+01, float 7.700000e+01, float 8.400000e+01, float 9.100000e+01]], align 64

declare ptr @malloc(i64)

define void @matmul(ptr %0, ptr %1, i64 %2, i64 %3, i64 %4, i64 %5, i64 %6, ptr %7, ptr %8, i64 %9, i64 %10, i64 %11, i64 %12, i64 %13, ptr %14, ptr %15, i64 %16, i64 %17, i64 %18, i64 %19, i64 %20) #0 {
  %22 = insertvalue { ptr, ptr, i64, [2 x i64], [2 x i64] } undef, ptr %0, 0
  %23 = insertvalue { ptr, ptr, i64, [2 x i64], [2 x i64] } %22, ptr %1, 1
  %24 = insertvalue { ptr, ptr, i64, [2 x i64], [2 x i64] } %23, i64 %2, 2
  %25 = insertvalue { ptr, ptr, i64, [2 x i64], [2 x i64] } %24, i64 %3, 3, 0
  %26 = insertvalue { ptr, ptr, i64, [2 x i64], [2 x i64] } %25, i64 %5, 4, 0
  %27 = insertvalue { ptr, ptr, i64, [2 x i64], [2 x i64] } %26, i64 %4, 3, 1
  %28 = insertvalue { ptr, ptr, i64, [2 x i64], [2 x i64] } %27, i64 %6, 4, 1
  %29 = insertvalue { ptr, ptr, i64, [2 x i64], [2 x i64] } undef, ptr %7, 0
  %30 = insertvalue { ptr, ptr, i64, [2 x i64], [2 x i64] } %29, ptr %8, 1
  %31 = insertvalue { ptr, ptr, i64, [2 x i64], [2 x i64] } %30, i64 %9, 2
  %32 = insertvalue { ptr, ptr, i64, [2 x i64], [2 x i64] } %31, i64 %10, 3, 0
  %33 = insertvalue { ptr, ptr, i64, [2 x i64], [2 x i64] } %32, i64 %12, 4, 0
  %34 = insertvalue { ptr, ptr, i64, [2 x i64], [2 x i64] } %33, i64 %11, 3, 1
  %35 = insertvalue { ptr, ptr, i64, [2 x i64], [2 x i64] } %34, i64 %13, 4, 1
  %36 = insertvalue { ptr, ptr, i64, [2 x i64], [2 x i64] } undef, ptr %14, 0
  %37 = insertvalue { ptr, ptr, i64, [2 x i64], [2 x i64] } %36, ptr %15, 1
  %38 = insertvalue { ptr, ptr, i64, [2 x i64], [2 x i64] } %37, i64 %16, 2
  %39 = insertvalue { ptr, ptr, i64, [2 x i64], [2 x i64] } %38, i64 %17, 3, 0
  %40 = insertvalue { ptr, ptr, i64, [2 x i64], [2 x i64] } %39, i64 %19, 4, 0
  %41 = insertvalue { ptr, ptr, i64, [2 x i64], [2 x i64] } %40, i64 %18, 3, 1
  %42 = insertvalue { ptr, ptr, i64, [2 x i64], [2 x i64] } %41, i64 %20, 4, 1
  %43 = call i64 @llvm.vscale.i64()
  %44 = mul i64 %43, 4
  br label %45

45:                                               ; preds = %168, %21
  %46 = phi i64 [ %169, %168 ], [ 0, %21 ]
  %47 = icmp slt i64 %46, %3
  br i1 %47, label %48, label %170

48:                                               ; preds = %166, %45
  %49 = phi i64 [ %167, %166 ], [ 0, %45 ]
  %50 = icmp slt i64 %49, %11
  br i1 %50, label %51, label %168

51:                                               ; preds = %164, %48
  %52 = phi i64 [ %165, %164 ], [ 0, %48 ]
  %53 = icmp slt i64 %52, %4
  br i1 %53, label %54, label %166

54:                                               ; preds = %51
  %55 = sub i64 %3, %46
  %56 = icmp slt i64 %55, %44
  %57 = select i1 %56, i64 %55, i64 %44
  %58 = sub i64 %11, %49
  %59 = icmp slt i64 %58, %44
  %60 = select i1 %59, i64 %58, i64 %44
  %61 = insertvalue { ptr, ptr, i64 } undef, ptr %0, 0
  %62 = insertvalue { ptr, ptr, i64 } %61, ptr %1, 1
  %63 = insertvalue { ptr, ptr, i64 } %62, i64 0, 2
  %64 = mul i64 %46, %5
  %65 = add i64 %2, %64
  %66 = mul i64 %52, %6
  %67 = add i64 %65, %66
  %68 = insertvalue { ptr, ptr, i64 } undef, ptr %7, 0
  %69 = insertvalue { ptr, ptr, i64 } %68, ptr %8, 1
  %70 = insertvalue { ptr, ptr, i64 } %69, i64 0, 2
  %71 = mul i64 %52, %12
  %72 = add i64 %9, %71
  %73 = mul i64 %49, %13
  %74 = add i64 %72, %73
  %75 = insertvalue { ptr, ptr, i64 } undef, ptr %14, 0
  %76 = insertvalue { ptr, ptr, i64 } %75, ptr %15, 1
  %77 = insertvalue { ptr, ptr, i64 } %76, i64 0, 2
  %78 = mul i64 %46, %19
  %79 = add i64 %16, %78
  %80 = mul i64 %49, %20
  %81 = add i64 %79, %80
  %82 = insertvalue { ptr, ptr, i64, [2 x i64], [2 x i64] } undef, ptr %14, 0
  %83 = insertvalue { ptr, ptr, i64, [2 x i64], [2 x i64] } %82, ptr %15, 1
  %84 = insertvalue { ptr, ptr, i64, [2 x i64], [2 x i64] } %83, i64 %81, 2
  %85 = insertvalue { ptr, ptr, i64, [2 x i64], [2 x i64] } %84, i64 %57, 3, 0
  %86 = insertvalue { ptr, ptr, i64, [2 x i64], [2 x i64] } %85, i64 %19, 4, 0
  %87 = insertvalue { ptr, ptr, i64, [2 x i64], [2 x i64] } %86, i64 %60, 3, 1
  %88 = insertvalue { ptr, ptr, i64, [2 x i64], [2 x i64] } %87, i64 %20, 4, 1
  %89 = call <vscale x 4 x i32> @llvm.experimental.stepvector.nxv4i32()
  %90 = trunc i64 %57 to i32
  %91 = insertelement <vscale x 4 x i32> undef, i32 %90, i32 0
  %92 = shufflevector <vscale x 4 x i32> %91, <vscale x 4 x i32> undef, <vscale x 4 x i32> zeroinitializer
  %93 = icmp slt <vscale x 4 x i32> %89, %92
  %94 = insertvalue { ptr, ptr, i64, [1 x i64], [1 x i64] } undef, ptr %0, 0
  %95 = insertvalue { ptr, ptr, i64, [1 x i64], [1 x i64] } %94, ptr %1, 1
  %96 = insertvalue { ptr, ptr, i64, [1 x i64], [1 x i64] } %95, i64 %67, 2
  %97 = insertvalue { ptr, ptr, i64, [1 x i64], [1 x i64] } %96, i64 %57, 3, 0
  %98 = insertvalue { ptr, ptr, i64, [1 x i64], [1 x i64] } %97, i64 %5, 4, 0
  br label %99

99:                                               ; preds = %111, %54
  %100 = phi i64 [ %113, %111 ], [ 0, %54 ]
  %101 = phi <vscale x 4 x float> [ %112, %111 ], [ zeroinitializer, %54 ]
  %102 = icmp slt i64 %100, %44
  br i1 %102, label %103, label %114

103:                                              ; preds = %99
  %104 = extractelement <vscale x 4 x i1> %93, i64 %100
  br i1 %104, label %105, label %111

105:                                              ; preds = %103
  %106 = getelementptr float, ptr %1, i64 %67
  %107 = mul i64 %100, %5
  %108 = getelementptr float, ptr %106, i64 %107
  %109 = load float, ptr %108, align 4
  %110 = insertelement <vscale x 4 x float> %101, float %109, i64 %100
  br label %111

111:                                              ; preds = %105, %103
  %112 = phi <vscale x 4 x float> [ %110, %105 ], [ %101, %103 ]
  %113 = add i64 %100, 1
  br label %99

114:                                              ; preds = %99
  %115 = trunc i64 %60 to i32
  %116 = insertelement <vscale x 4 x i32> undef, i32 %115, i32 0
  %117 = shufflevector <vscale x 4 x i32> %116, <vscale x 4 x i32> undef, <vscale x 4 x i32> zeroinitializer
  %118 = icmp slt <vscale x 4 x i32> %89, %117
  %119 = insertvalue { ptr, ptr, i64, [1 x i64], [1 x i64] } undef, ptr %7, 0
  %120 = insertvalue { ptr, ptr, i64, [1 x i64], [1 x i64] } %119, ptr %8, 1
  %121 = insertvalue { ptr, ptr, i64, [1 x i64], [1 x i64] } %120, i64 %74, 2
  %122 = insertvalue { ptr, ptr, i64, [1 x i64], [1 x i64] } %121, i64 %60, 3, 0
  %123 = insertvalue { ptr, ptr, i64, [1 x i64], [1 x i64] } %122, i64 %13, 4, 0
  br label %124

124:                                              ; preds = %136, %114
  %125 = phi i64 [ %138, %136 ], [ 0, %114 ]
  %126 = phi <vscale x 4 x float> [ %137, %136 ], [ zeroinitializer, %114 ]
  %127 = icmp slt i64 %125, %44
  br i1 %127, label %128, label %139

128:                                              ; preds = %124
  %129 = extractelement <vscale x 4 x i1> %118, i64 %125
  br i1 %129, label %130, label %136

130:                                              ; preds = %128
  %131 = getelementptr float, ptr %8, i64 %74
  %132 = mul i64 %125, %13
  %133 = getelementptr float, ptr %131, i64 %132
  %134 = load float, ptr %133, align 4
  %135 = insertelement <vscale x 4 x float> %126, float %134, i64 %125
  br label %136

136:                                              ; preds = %130, %128
  %137 = phi <vscale x 4 x float> [ %135, %130 ], [ %126, %128 ]
  %138 = add i64 %125, 1
  br label %124

139:                                              ; preds = %124
  call void @llvm.aarch64.sme.zero(i32 17)
  %140 = call i64 @llvm.smin.i64(i64 %57, i64 %44)
  br label %141

141:                                              ; preds = %144, %139
  %142 = phi i64 [ %151, %144 ], [ 0, %139 ]
  %143 = icmp slt i64 %142, %140
  br i1 %143, label %144, label %152

144:                                              ; preds = %141
  %145 = getelementptr float, ptr %15, i64 %81
  %146 = mul i64 %142, %19
  %147 = mul i64 %20, 0
  %148 = add i64 %146, %147
  %149 = getelementptr float, ptr %145, i64 %148
  %150 = trunc i64 %142 to i32
  call void @llvm.aarch64.sme.ld1w.horiz(<vscale x 4 x i1> %118, ptr %149, i32 0, i32 %150)
  %151 = add i64 %142, 1
  br label %141

152:                                              ; preds = %141
  call void @llvm.aarch64.sme.mopa.nxv4f32(i32 0, <vscale x 4 x i1> %93, <vscale x 4 x i1> %118, <vscale x 4 x float> %101, <vscale x 4 x float> %126)
  br label %153

153:                                              ; preds = %156, %152
  %154 = phi i64 [ %163, %156 ], [ 0, %152 ]
  %155 = icmp slt i64 %154, %140
  br i1 %155, label %156, label %164

156:                                              ; preds = %153
  %157 = getelementptr float, ptr %15, i64 %81
  %158 = mul i64 %154, %19
  %159 = mul i64 %20, 0
  %160 = add i64 %158, %159
  %161 = getelementptr float, ptr %157, i64 %160
  %162 = trunc i64 %154 to i32
  call void @llvm.aarch64.sme.st1w.horiz(<vscale x 4 x i1> %118, ptr %161, i32 0, i32 %162)
  %163 = add i64 %154, 1
  br label %153

164:                                              ; preds = %153
  %165 = add i64 %52, 1
  br label %51

166:                                              ; preds = %51
  %167 = add i64 %49, %44
  br label %48

168:                                              ; preds = %48
  %169 = add i64 %46, %44
  br label %45

170:                                              ; preds = %45
  %171 = alloca { ptr, ptr, i64, [2 x i64], [2 x i64] }, i64 1, align 8
  store { ptr, ptr, i64, [2 x i64], [2 x i64] } %42, ptr %171, align 8
  %172 = insertvalue { i64, ptr } { i64 2, ptr undef }, ptr %171, 1
  call void @printMemrefF32(i64 2, ptr %171)
  ret void
}

define void @main() {
  %1 = call ptr @malloc(i64 add (i64 ptrtoint (ptr getelementptr (float, ptr null, i32 91) to i64), i64 64))
  %2 = ptrtoint ptr %1 to i64
  %3 = add i64 %2, 63
  %4 = urem i64 %3, 64
  %5 = sub i64 %3, %4
  %6 = inttoptr i64 %5 to ptr
  %7 = insertvalue { ptr, ptr, i64, [2 x i64], [2 x i64] } undef, ptr %1, 0
  %8 = insertvalue { ptr, ptr, i64, [2 x i64], [2 x i64] } %7, ptr %6, 1
  %9 = insertvalue { ptr, ptr, i64, [2 x i64], [2 x i64] } %8, i64 0, 2
  %10 = insertvalue { ptr, ptr, i64, [2 x i64], [2 x i64] } %9, i64 13, 3, 0
  %11 = insertvalue { ptr, ptr, i64, [2 x i64], [2 x i64] } %10, i64 7, 3, 1
  %12 = insertvalue { ptr, ptr, i64, [2 x i64], [2 x i64] } %11, i64 7, 4, 0
  %13 = insertvalue { ptr, ptr, i64, [2 x i64], [2 x i64] } %12, i64 1, 4, 1
  br label %14

14:                                               ; preds = %29, %0
  %15 = phi i64 [ %30, %29 ], [ 0, %0 ]
  %16 = icmp slt i64 %15, 13
  br i1 %16, label %17, label %31

17:                                               ; preds = %20, %14
  %18 = phi i64 [ %28, %20 ], [ 0, %14 ]
  %19 = icmp slt i64 %18, 7
  br i1 %19, label %20, label %29

20:                                               ; preds = %17
  %21 = mul i64 %18, 13
  %22 = add i64 %21, %15
  %23 = getelementptr float, ptr @__constant_7x13xf32, i64 %22
  %24 = load float, ptr %23, align 4
  %25 = mul i64 %15, 7
  %26 = add i64 %25, %18
  %27 = getelementptr float, ptr %6, i64 %26
  store float %24, ptr %27, align 4
  %28 = add i64 %18, 1
  br label %17

29:                                               ; preds = %17
  %30 = add i64 %15, 1
  br label %14

31:                                               ; preds = %14
  %32 = call ptr @malloc(i64 add (i64 ptrtoint (ptr getelementptr (float, ptr null, i32 49) to i64), i64 64))
  %33 = ptrtoint ptr %32 to i64
  %34 = add i64 %33, 63
  %35 = urem i64 %34, 64
  %36 = sub i64 %34, %35
  %37 = inttoptr i64 %36 to ptr
  %38 = insertvalue { ptr, ptr, i64, [2 x i64], [2 x i64] } undef, ptr %32, 0
  %39 = insertvalue { ptr, ptr, i64, [2 x i64], [2 x i64] } %38, ptr %37, 1
  %40 = insertvalue { ptr, ptr, i64, [2 x i64], [2 x i64] } %39, i64 0, 2
  %41 = insertvalue { ptr, ptr, i64, [2 x i64], [2 x i64] } %40, i64 7, 3, 0
  %42 = insertvalue { ptr, ptr, i64, [2 x i64], [2 x i64] } %41, i64 7, 3, 1
  %43 = insertvalue { ptr, ptr, i64, [2 x i64], [2 x i64] } %42, i64 7, 4, 0
  %44 = insertvalue { ptr, ptr, i64, [2 x i64], [2 x i64] } %43, i64 1, 4, 1
  br label %45

45:                                               ; preds = %56, %31
  %46 = phi i64 [ %57, %56 ], [ 0, %31 ]
  %47 = icmp slt i64 %46, 7
  br i1 %47, label %48, label %58

48:                                               ; preds = %51, %45
  %49 = phi i64 [ %55, %51 ], [ 0, %45 ]
  %50 = icmp slt i64 %49, 7
  br i1 %50, label %51, label %56

51:                                               ; preds = %48
  %52 = mul i64 %46, 7
  %53 = add i64 %52, %49
  %54 = getelementptr float, ptr %37, i64 %53
  store float 0.000000e+00, ptr %54, align 4
  %55 = add i64 %49, 1
  br label %48

56:                                               ; preds = %48
  %57 = add i64 %46, 1
  br label %45

58:                                               ; preds = %45
  call void @matmul(ptr inttoptr (i64 3735928559 to ptr), ptr @__constant_7x13xf32, i64 0, i64 7, i64 13, i64 13, i64 1, ptr %1, ptr %6, i64 0, i64 13, i64 7, i64 7, i64 1, ptr %32, ptr %37, i64 0, i64 7, i64 7, i64 7, i64 1)
  ret void
}

declare void @printMemrefF32(i64, ptr)

; Function Attrs: nocallback nofree nosync nounwind willreturn memory(none)
declare i64 @llvm.vscale.i64() #1

; Function Attrs: nocallback nofree nosync nounwind willreturn memory(none)
declare <vscale x 4 x i32> @llvm.experimental.stepvector.nxv4i32() #1

; Function Attrs: nocallback nofree nosync nounwind willreturn
declare void @llvm.aarch64.sme.zero(i32 immarg) #2

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i64 @llvm.smin.i64(i64, i64) #3

; Function Attrs: nocallback nofree nosync nounwind willreturn
declare void @llvm.aarch64.sme.mopa.nxv4f32(i32 immarg, <vscale x 4 x i1>, <vscale x 4 x i1>, <vscale x 4 x float>, <vscale x 4 x float>) #2

; Function Attrs: nocallback nofree nosync nounwind willreturn
declare void @llvm.aarch64.sme.st1w.horiz(<vscale x 4 x i1>, ptr, i32 immarg, i32) #2

; Function Attrs: nocallback nofree nosync nounwind willreturn
declare void @llvm.aarch64.sme.ld1w.horiz(<vscale x 4 x i1>, ptr, i32 immarg, i32) #2

attributes #0 = { "aarch64_pstate_sm_body" "aarch64_pstate_za_new" }
attributes #1 = { nocallback nofree nosync nounwind willreturn memory(none) }
attributes #2 = { nocallback nofree nosync nounwind willreturn }
attributes #3 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }

!llvm.module.flags = !{!0}

!0 = !{i32 2, !"Debug Info Version", i32 3}
