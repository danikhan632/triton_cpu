[32m#map = affine_map<(d0, d1) -> (d0, d1)>
module {
  func.func @matmul_kernel_0d1d2d34567c89c1011c(%arg0: memref<*xf16> {tt.divisibility = 16 : i32}, %arg1: memref<*xf16> {tt.divisibility = 16 : i32}, %arg2: memref<*xf16> {tt.divisibility = 16 : i32}, %arg3: i32, %arg4: i32, %arg5: i32, %arg6: i32, %arg7: i32, %arg8: i32, %arg9: i32, %arg10: i32, %arg11: i32, %arg12: i32, %arg13: i32, %arg14: i32) {
    %c8_i32 = arith.constant 8 : i32
    %c32_i32 = arith.constant 32 : i32
    %c64_i32 = arith.constant 64 : i32
    %c16_i32 = arith.constant 16 : i32
    %cst = arith.constant 0.000000e+00 : f32
    %c0_i32 = arith.constant 0 : i32
    %c1_i32 = arith.constant 1 : i32
    %c31_i32 = arith.constant 31 : i32
    %c63_i32 = arith.constant 63 : i32
    %c15_i32 = arith.constant 15 : i32
    %c0 = arith.constant 0 : index
    %c1 = arith.constant 1 : index
    %c16 = arith.constant 16 : index
    %cst_0 = arith.constant 0.000000e+00 : f16
    %c32 = arith.constant 32 : index
    %c64 = arith.constant 64 : index
    %0 = tensor.empty() : tensor<32x64xf32>
    %1 = linalg.fill ins(%cst : f32) outs(%0 : tensor<32x64xf32>) -> tensor<32x64xf32>
    %2 = arith.addi %arg3, %c31_i32 : i32
    %3 = arith.divsi %2, %c32_i32 : i32
    %4 = arith.addi %arg4, %c63_i32 : i32
    %5 = arith.divsi %4, %c64_i32 : i32
    %6 = arith.muli %5, %c8_i32 : i32
    %7 = arith.divsi %arg12, %6 : i32
    %8 = arith.muli %7, %c8_i32 : i32
    %9 = arith.subi %3, %8 : i32
    %10 = arith.minsi %9, %c8_i32 : i32
    %11 = arith.remsi %arg12, %10 : i32
    %12 = arith.addi %8, %11 : i32
    %13 = arith.remsi %arg12, %6 : i32
    %14 = arith.divsi %13, %10 : i32
    %15 = arith.muli %12, %c32_i32 : i32
    %16 = arith.index_cast %15 : i32 to index
    %17 = arith.muli %14, %c64_i32 : i32
    %18 = arith.index_cast %17 : i32 to index
    %19 = arith.index_cast %arg3 : i32 to index
    %20 = arith.index_cast %arg6 : i32 to index
    %21 = arith.muli %16, %20 : index
    %22 = arith.muli %19, %20 : index
    %23 = arith.index_cast %arg7 : i32 to index
    %24 = arith.index_cast %arg4 : i32 to index
    %25 = arith.addi %arg5, %c15_i32 : i32
    %26 = arith.divsi %25, %c16_i32 : i32
    %27 = arith.muli %arg7, %c16_i32 : i32
    %28 = arith.index_cast %27 : i32 to index
    %29:3 = scf.for %arg15 = %c0_i32 to %26 step %c1_i32 iter_args(%arg16 = %1, %arg17 = %21, %arg18 = %c0) -> (tensor<32x64xf32>, index, index)  : i32 {
      %43 = arith.addi %arg18, %18 : index
      %44 = arith.remsi %43, %24 : index
      %45 = arith.subi %43, %44 : index
      %46 = arith.addi %44, %c64 : index
      %47 = arith.minsi %46, %24 : index
      %48 = arith.subi %47, %44 : index
      %reinterpret_cast_1 = memref.reinterpret_cast %arg1 to offset: [%43], sizes: [%c16, %48], strides: [%23, %c1] : memref<*xf16> to memref<16x?xf16, strided<[?, ?], offset: ?>>
      %49 = arith.subi %c64, %48 : index
      %reinterpret_cast_2 = memref.reinterpret_cast %arg1 to offset: [%45], sizes: [%c16, %49], strides: [%23, %c1] : memref<*xf16> to memref<16x?xf16, strided<[?, ?], offset: ?>>
      %50 = arith.remsi %arg17, %20 : index
      %51 = arith.addi %22, %50 : index
      %52 = arith.subi %51, %arg17 : index
      %53 = arith.divsi %52, %20 : index
      %reinterpret_cast_3 = memref.reinterpret_cast %arg0 to offset: [%arg17], sizes: [%53, %c16], strides: [%20, %c1] : memref<*xf16> to memref<?x16xf16, strided<[?, ?], offset: ?>>
      %54 = arith.subi %c32, %53 : index
      %reinterpret_cast_4 = memref.reinterpret_cast %arg0 to offset: [%50], sizes: [%54, %c16], strides: [%20, %c1] : memref<*xf16> to memref<?x16xf16, strided<[?, ?], offset: ?>>
      %55 = arith.muli %arg15, %c16_i32 : i32
      %56 = arith.subi %arg5, %55 : i32
      %57 = arith.index_cast %56 : i32 to index
      %58 = arith.minsi %57, %c16 : index
      %alloc = memref.alloc() : memref<32x16xf16>
      %59 = arith.cmpi slt, %58, %c16 : index
      scf.if %59 {
        linalg.fill ins(%cst_0 : f16) outs(%alloc : memref<32x16xf16>)
      }
      %60 = arith.minsi %53, %c32 : index
      %61 = arith.subi %c32, %60 : index
      %subview_5 = memref.subview %reinterpret_cast_3[0, 0] [%60, %58] [1, 1] : memref<?x16xf16, strided<[?, ?], offset: ?>> to memref<?x?xf16, strided<[?, ?], offset: ?>>
      %subview_6 = memref.subview %reinterpret_cast_4[0, 0] [%61, %58] [1, 1] : memref<?x16xf16, strided<[?, ?], offset: ?>> to memref<?x?xf16, strided<[?, ?], offset: ?>>
      %subview_7 = memref.subview %alloc[0, 0] [%60, %58] [1, 1] : memref<32x16xf16> to memref<?x?xf16, strided<[16, 1]>>
      %subview_8 = memref.subview %alloc[%60, 0] [%61, %58] [1, 1] : memref<32x16xf16> to memref<?x?xf16, strided<[16, 1], offset: ?>>
      memref.copy %subview_5, %subview_7 : memref<?x?xf16, strided<[?, ?], offset: ?>> to memref<?x?xf16, strided<[16, 1]>>
      memref.copy %subview_6, %subview_8 : memref<?x?xf16, strided<[?, ?], offset: ?>> to memref<?x?xf16, strided<[16, 1], offset: ?>>
      %62 = bufferization.to_tensor %alloc restrict writable : memref<32x16xf16>
      %alloc_9 = memref.alloc() : memref<16x64xf16>
      %63 = arith.cmpi slt, %58, %c16 : index
      scf.if %63 {
        linalg.fill ins(%cst_0 : f16) outs(%alloc_9 : memref<16x64xf16>)
      }
      %64 = arith.minsi %48, %c64 : index
      %65 = arith.subi %c64, %64 : index
      %subview_10 = memref.subview %reinterpret_cast_1[0, 0] [%58, %64] [1, 1] : memref<16x?xf16, strided<[?, ?], offset: ?>> to memref<?x?xf16, strided<[?, ?], offset: ?>>
      %subview_11 = memref.subview %reinterpret_cast_2[0, 0] [%58, %65] [1, 1] : memref<16x?xf16, strided<[?, ?], offset: ?>> to memref<?x?xf16, strided<[?, ?], offset: ?>>
      %subview_12 = memref.subview %alloc_9[0, 0] [%58, %64] [1, 1] : memref<16x64xf16> to memref<?x?xf16, strided<[64, 1]>>
      %subview_13 = memref.subview %alloc_9[0, %64] [%58, %65] [1, 1] : memref<16x64xf16> to memref<?x?xf16, strided<[64, 1], offset: ?>>
      memref.copy %subview_10, %subview_12 : memref<?x?xf16, strided<[?, ?], offset: ?>> to memref<?x?xf16, strided<[64, 1]>>
      memref.copy %subview_11, %subview_13 : memref<?x?xf16, strided<[?, ?], offset: ?>> to memref<?x?xf16, strided<[64, 1], offset: ?>>
      %66 = bufferization.to_tensor %alloc_9 restrict writable : memref<16x64xf16>
      %67 = linalg.matmul ins(%62, %66 : tensor<32x16xf16>, tensor<16x64xf16>) outs(%1 : tensor<32x64xf32>) -> tensor<32x64xf32>
      %68 = linalg.generic {indexing_maps = [#map, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%67, %arg16 : tensor<32x64xf32>, tensor<32x64xf32>) outs(%67 : tensor<32x64xf32>) {
      ^bb0(%in: f32, %in_14: f32, %out: f32):
        %71 = arith.addf %in, %in_14 : f32
        linalg.yield %71 : f32
      } -> tensor<32x64xf32>
      %69 = arith.addi %arg17, %c16 : index
      %70 = arith.addi %arg18, %28 : index
      scf.yield %68, %69, %70 : tensor<32x64xf32>, index, index
    }
    %30 = arith.index_cast %arg8 : i32 to index
    %31 = arith.muli %16, %30 : index
    %32 = arith.addi %31, %18 : index
    %reinterpret_cast = memref.reinterpret_cast %arg2 to offset: [%32], sizes: [32, 64], strides: [%30, 1] : memref<*xf16> to memref<32x64xf16, strided<[?, 1], offset: ?>>
    %33 = tensor.empty() : tensor<32x64xf16>
    %34 = linalg.generic {indexing_maps = [#map, #map], iterator_types = ["parallel", "parallel"]} ins(%29#0 : tensor<32x64xf32>) outs(%33 : tensor<32x64xf16>) {
    ^bb0(%in: f32, %out: f16):
      %43 = arith.truncf %in : f32 to f16
      linalg.yield %43 : f16
    } -> tensor<32x64xf16>
    %35 = arith.addi %16, %c32 : index
    %36 = arith.minsi %35, %19 : index
    %37 = arith.subi %36, %16 : index
    %38 = arith.addi %18, %c64 : index
    %39 = arith.minsi %38, %24 : index
    %40 = arith.subi %39, %18 : index
    %41 = arith.minsi %37, %c32 : index
    %42 = arith.minsi %40, %c64 : index
    %extracted_slice = tensor.extract_slice %34[0, 0] [%41, %42] [1, 1] : tensor<32x64xf16> to tensor<?x?xf16>
    %subview = memref.subview %reinterpret_cast[0, 0] [%41, %42] [1, 1] : memref<32x64xf16, strided<[?, 1], offset: ?>> to memref<?x?xf16, strided<[?, 1], offset: ?>>
    bufferization.materialize_in_destination %extracted_slice in writable %subview : (tensor<?x?xf16>, memref<?x?xf16, strided<[?, 1], offset: ?>>) -> ()
    return
  }
}

[0m1

[32m#map = affine_map<(d0, d1) -> (-d0 + 32, d1)>
#map1 = affine_map<(d0, d1) -> (-d0 + 64, d1)>
#map2 = affine_map<(d0, d1) -> (d0, d1)>
module {
  func.func @matmul_kernel_0d1d2d34567c89c1011c(%arg0: memref<*xf16> {tt.divisibility = 16 : i32}, %arg1: memref<*xf16> {tt.divisibility = 16 : i32}, %arg2: memref<*xf16> {tt.divisibility = 16 : i32}, %arg3: i32, %arg4: i32, %arg5: i32, %arg6: i32, %arg7: i32, %arg8: i32, %arg9: i32, %arg10: i32, %arg11: i32, %arg12: i32, %arg13: i32, %arg14: i32) {
    %cst = arith.constant dense<false> : vector<2x[4]xi1>
    %c2 = arith.constant 2 : index
    %c4 = arith.constant 4 : index
    %c8_i32 = arith.constant 8 : i32
    %c32_i32 = arith.constant 32 : i32
    %c64_i32 = arith.constant 64 : i32
    %c16_i32 = arith.constant 16 : i32
    %cst_0 = arith.constant 0.000000e+00 : f32
    %c0_i32 = arith.constant 0 : i32
    %c1_i32 = arith.constant 1 : i32
    %c31_i32 = arith.constant 31 : i32
    %c63_i32 = arith.constant 63 : i32
    %c15_i32 = arith.constant 15 : i32
    %c0 = arith.constant 0 : index
    %c1 = arith.constant 1 : index
    %c16 = arith.constant 16 : index
    %cst_1 = arith.constant 0.000000e+00 : f16
    %c32 = arith.constant 32 : index
    %c64 = arith.constant 64 : index
    %alloc = memref.alloc() {alignment = 64 : i64} : memref<32x64xf32>
    linalg.fill ins(%cst_0 : f32) outs(%alloc : memref<32x64xf32>)
    %0 = arith.addi %arg3, %c31_i32 : i32
    %1 = arith.divsi %0, %c32_i32 : i32
    %2 = arith.addi %arg4, %c63_i32 : i32
    %3 = arith.divsi %2, %c64_i32 : i32
    %4 = arith.muli %3, %c8_i32 : i32
    %5 = arith.divsi %arg12, %4 : i32
    %6 = arith.muli %5, %c8_i32 : i32
    %7 = arith.subi %1, %6 : i32
    %8 = arith.minsi %7, %c8_i32 : i32
    %9 = arith.remsi %arg12, %8 : i32
    %10 = arith.addi %6, %9 : i32
    %11 = arith.remsi %arg12, %4 : i32
    %12 = arith.divsi %11, %8 : i32
    %13 = arith.muli %10, %c32_i32 : i32
    %14 = arith.index_cast %13 : i32 to index
    %15 = arith.muli %12, %c64_i32 : i32
    %16 = arith.index_cast %15 : i32 to index
    %17 = arith.index_cast %arg3 : i32 to index
    %18 = arith.index_cast %arg6 : i32 to index
    %19 = arith.muli %14, %18 : index
    %20 = arith.muli %17, %18 : index
    %21 = arith.index_cast %arg7 : i32 to index
    %22 = arith.index_cast %arg4 : i32 to index
    %23 = arith.addi %arg5, %c15_i32 : i32
    %24 = arith.divsi %23, %c16_i32 : i32
    %25 = arith.muli %arg7, %c16_i32 : i32
    %26 = arith.index_cast %25 : i32 to index
    %alloc_2 = memref.alloc() {alignment = 64 : i64} : memref<32x64xf32>
    memref.copy %alloc, %alloc_2 : memref<32x64xf32> to memref<32x64xf32>
    %27:3 = scf.for %arg15 = %c0_i32 to %24 step %c1_i32 iter_args(%arg16 = %alloc_2, %arg17 = %19, %arg18 = %c0) -> (memref<32x64xf32>, index, index)  : i32 {
      %39 = arith.addi %arg18, %16 : index
      %40 = arith.remsi %39, %22 : index
      %41 = arith.subi %39, %40 : index
      %42 = arith.addi %40, %c64 : index
      %43 = arith.minsi %42, %22 : index
      %44 = arith.subi %43, %40 : index
      %reinterpret_cast_5 = memref.reinterpret_cast %arg1 to offset: [%39], sizes: [%c16, %44], strides: [%21, %c1] : memref<*xf16> to memref<16x?xf16, strided<[?, ?], offset: ?>>
      %45 = arith.subi %c64, %44 : index
      %reinterpret_cast_6 = memref.reinterpret_cast %arg1 to offset: [%41], sizes: [%c16, %45], strides: [%21, %c1] : memref<*xf16> to memref<16x?xf16, strided<[?, ?], offset: ?>>
      %46 = arith.remsi %arg17, %18 : index
      %47 = arith.addi %20, %46 : index
      %48 = arith.subi %47, %arg17 : index
      %49 = arith.divsi %48, %18 : index
      %reinterpret_cast_7 = memref.reinterpret_cast %arg0 to offset: [%arg17], sizes: [%49, %c16], strides: [%18, %c1] : memref<*xf16> to memref<?x16xf16, strided<[?, ?], offset: ?>>
      %50 = arith.subi %c32, %49 : index
      %reinterpret_cast_8 = memref.reinterpret_cast %arg0 to offset: [%46], sizes: [%50, %c16], strides: [%18, %c1] : memref<*xf16> to memref<?x16xf16, strided<[?, ?], offset: ?>>
      %51 = arith.muli %arg15, %c16_i32 : i32
      %52 = arith.subi %arg5, %51 : i32
      %53 = arith.index_cast %52 : i32 to index
      %54 = arith.minsi %53, %c16 : index
      %alloc_9 = memref.alloc() : memref<32x16xf16>
      %55 = arith.cmpi slt, %54, %c16 : index
      scf.if %55 {
        linalg.fill ins(%cst_1 : f16) outs(%alloc_9 : memref<32x16xf16>)
      }
      %56 = arith.minsi %49, %c32 : index
      %57 = arith.subi %c32, %56 : index
      %subview_10 = memref.subview %reinterpret_cast_7[0, 0] [%56, %54] [1, 1] : memref<?x16xf16, strided<[?, ?], offset: ?>> to memref<?x?xf16, strided<[?, ?], offset: ?>>
      %subview_11 = memref.subview %reinterpret_cast_8[0, 0] [%57, %54] [1, 1] : memref<?x16xf16, strided<[?, ?], offset: ?>> to memref<?x?xf16, strided<[?, ?], offset: ?>>
      %subview_12 = memref.subview %alloc_9[0, 0] [%56, %54] [1, 1] : memref<32x16xf16> to memref<?x?xf16, strided<[16, 1]>>
      %subview_13 = memref.subview %alloc_9[%56, 0] [%57, %54] [1, 1] : memref<32x16xf16> to memref<?x?xf16, strided<[16, 1], offset: ?>>
      memref.copy %subview_10, %subview_12 : memref<?x?xf16, strided<[?, ?], offset: ?>> to memref<?x?xf16, strided<[16, 1]>>
      memref.copy %subview_11, %subview_13 : memref<?x?xf16, strided<[?, ?], offset: ?>> to memref<?x?xf16, strided<[16, 1], offset: ?>>
      %alloc_14 = memref.alloc() : memref<16x64xf16>
      %58 = arith.cmpi slt, %54, %c16 : index
      scf.if %58 {
        linalg.fill ins(%cst_1 : f16) outs(%alloc_14 : memref<16x64xf16>)
      }
      %59 = arith.minsi %44, %c64 : index
      %60 = arith.subi %c64, %59 : index
      %subview_15 = memref.subview %reinterpret_cast_5[0, 0] [%54, %59] [1, 1] : memref<16x?xf16, strided<[?, ?], offset: ?>> to memref<?x?xf16, strided<[?, ?], offset: ?>>
      %subview_16 = memref.subview %reinterpret_cast_6[0, 0] [%54, %60] [1, 1] : memref<16x?xf16, strided<[?, ?], offset: ?>> to memref<?x?xf16, strided<[?, ?], offset: ?>>
      %subview_17 = memref.subview %alloc_14[0, 0] [%54, %59] [1, 1] : memref<16x64xf16> to memref<?x?xf16, strided<[64, 1]>>
      %subview_18 = memref.subview %alloc_14[0, %59] [%54, %60] [1, 1] : memref<16x64xf16> to memref<?x?xf16, strided<[64, 1], offset: ?>>
      memref.copy %subview_15, %subview_17 : memref<?x?xf16, strided<[?, ?], offset: ?>> to memref<?x?xf16, strided<[64, 1]>>
      memref.copy %subview_16, %subview_18 : memref<?x?xf16, strided<[?, ?], offset: ?>> to memref<?x?xf16, strided<[64, 1], offset: ?>>
      %vscale = vector.vscale
      %61 = arith.muli %vscale, %c4 : index
      %62 = arith.muli %vscale, %c4 : index
      %alloc_19 = memref.alloc() {alignment = 64 : i64} : memref<32x64xf32>
      memref.copy %alloc, %alloc_19 : memref<32x64xf32> to memref<32x64xf32>
      %63 = scf.for %arg19 = %c0 to %c32 step %61 iter_args(%arg20 = %alloc_19) -> (memref<32x64xf32>) {
        %66 = scf.for %arg21 = %c0 to %c64 step %62 iter_args(%arg22 = %arg20) -> (memref<32x64xf32>) {
          %67 = scf.for %arg23 = %c0 to %c16 step %c2 iter_args(%arg24 = %arg22) -> (memref<32x64xf32>) {
            %68 = affine.min #map(%arg19, %61)
            %69 = affine.min #map1(%arg21, %62)
            %70 = affine.min #map(%arg19, %61)
            %71 = affine.min #map1(%arg21, %62)
            %subview_20 = memref.subview %alloc_9[%arg19, %arg23] [%68, 2] [1, 1] : memref<32x16xf16> to memref<?x2xf16, strided<[16, 1], offset: ?>>
            %subview_21 = memref.subview %alloc_14[%arg23, %arg21] [2, %69] [1, 1] : memref<16x64xf16> to memref<2x?xf16, strided<[64, 1], offset: ?>>
            %subview_22 = memref.subview %arg24[%arg19, %arg21] [%70, %71] [1, 1] : memref<32x64xf32> to memref<?x?xf32, strided<[64, 1], offset: ?>>
            %72 = vector.create_mask %68, %c2 : vector<[4]x2xi1>
            %73 = vector.transfer_read %subview_20[%c0, %c0], %cst_1, %72 {in_bounds = [true, true]} : memref<?x2xf16, strided<[16, 1], offset: ?>>, vector<[4]x2xf16>
            %74 = vector.create_mask %69 : vector<[4]xi1>
            %75 = vector.insert %74, %cst [0] : vector<[4]xi1> into vector<2x[4]xi1>
            %76 = vector.insert %74, %75 [1] : vector<[4]xi1> into vector<2x[4]xi1>
            %77 = vector.transfer_read %subview_21[%c0, %c0], %cst_1, %76 {in_bounds = [true, true]} : memref<2x?xf16, strided<[64, 1], offset: ?>>, vector<2x[4]xf16>
            %78 = vector.create_mask %68, %69 : vector<[4]x[4]xi1>
            %79 = vector.transfer_read %subview_22[%c0, %c0], %cst_0, %78 {in_bounds = [true, true]} : memref<?x?xf32, strided<[64, 1], offset: ?>>, vector<[4]x[4]xf32>
            %80 = arith.extf %73 : vector<[4]x2xf16> to vector<[4]x2xf32>
            %81 = arith.extf %77 : vector<2x[4]xf16> to vector<2x[4]xf32>
            %82 = vector.create_mask %68, %69, %c2 : vector<[4]x[4]x2xi1>
            %83 = vector.transpose %80, [1, 0] : vector<[4]x2xf32> to vector<2x[4]xf32>
            %84 = vector.transpose %82, [2, 0, 1] : vector<[4]x[4]x2xi1> to vector<2x[4]x[4]xi1>
            %85 = vector.extract %83[0] : vector<[4]xf32> from vector<2x[4]xf32>
            %86 = vector.extract %81[0] : vector<[4]xf32> from vector<2x[4]xf32>
            %87 = vector.extract %84[0] : vector<[4]x[4]xi1> from vector<2x[4]x[4]xi1>
            %88 = vector.mask %87 { vector.outerproduct %85, %86, %79 {kind = #vector.kind<add>} : vector<[4]xf32>, vector<[4]xf32> } : vector<[4]x[4]xi1> -> vector<[4]x[4]xf32>
            %89 = vector.extract %83[1] : vector<[4]xf32> from vector<2x[4]xf32>
            %90 = vector.extract %81[1] : vector<[4]xf32> from vector<2x[4]xf32>
            %91 = vector.extract %84[1] : vector<[4]x[4]xi1> from vector<2x[4]x[4]xi1>
            %92 = vector.mask %91 { vector.outerproduct %89, %90, %88 {kind = #vector.kind<add>} : vector<[4]xf32>, vector<[4]xf32> } : vector<[4]x[4]xi1> -> vector<[4]x[4]xf32>
            vector.transfer_write %92, %subview_22[%c0, %c0], %78 {in_bounds = [true, true]} : vector<[4]x[4]xf32>, memref<?x?xf32, strided<[64, 1], offset: ?>>
            %subview_23 = memref.subview %arg24[%arg19, %arg21] [%70, %71] [1, 1] : memref<32x64xf32> to memref<?x?xf32, strided<[64, 1], offset: ?>>
            memref.copy %subview_22, %subview_23 : memref<?x?xf32, strided<[64, 1], offset: ?>> to memref<?x?xf32, strided<[64, 1], offset: ?>>
            scf.yield %arg24 : memref<32x64xf32>
          }
          scf.yield %67 : memref<32x64xf32>
        }
        scf.yield %66 : memref<32x64xf32>
      }
      linalg.generic {indexing_maps = [#map2, #map2, #map2], iterator_types = ["parallel", "parallel"]} ins(%63, %arg16 : memref<32x64xf32>, memref<32x64xf32>) outs(%63 : memref<32x64xf32>) {
      ^bb0(%in: f32, %in_20: f32, %out: f32):
        %66 = arith.addf %in, %in_20 : f32
        linalg.yield %66 : f32
      }
      %64 = arith.addi %arg17, %c16 : index
      %65 = arith.addi %arg18, %26 : index
      scf.yield %63, %64, %65 : memref<32x64xf32>, index, index
    }
    %28 = arith.index_cast %arg8 : i32 to index
    %29 = arith.muli %14, %28 : index
    %30 = arith.addi %29, %16 : index
    %reinterpret_cast = memref.reinterpret_cast %arg2 to offset: [%30], sizes: [32, 64], strides: [%28, 1] : memref<*xf16> to memref<32x64xf16, strided<[?, 1], offset: ?>>
    %alloc_3 = memref.alloc() {alignment = 64 : i64} : memref<32x64xf16>
    linalg.generic {indexing_maps = [#map2, #map2], iterator_types = ["parallel", "parallel"]} ins(%27#0 : memref<32x64xf32>) outs(%alloc_3 : memref<32x64xf16>) {
    ^bb0(%in: f32, %out: f16):
      %39 = arith.truncf %in : f32 to f16
      linalg.yield %39 : f16
    }
    %31 = arith.addi %14, %c32 : index
    %32 = arith.minsi %31, %17 : index
    %33 = arith.subi %32, %14 : index
    %34 = arith.addi %16, %c64 : index
    %35 = arith.minsi %34, %22 : index
    %36 = arith.subi %35, %16 : index
    %37 = arith.minsi %33, %c32 : index
    %38 = arith.minsi %36, %c64 : index
    %subview = memref.subview %alloc_3[0, 0] [%37, %38] [1, 1] : memref<32x64xf16> to memref<?x?xf16, strided<[64, 1]>>
    %subview_4 = memref.subview %reinterpret_cast[0, 0] [%37, %38] [1, 1] : memref<32x64xf16, strided<[?, 1], offset: ?>> to memref<?x?xf16, strided<[?, 1], offset: ?>>
    memref.copy %subview, %subview_4 : memref<?x?xf16, strided<[64, 1]>> to memref<?x?xf16, strided<[?, 1], offset: ?>>
    return
  }
}

[0m
[36m#map = affine_map<()[s0] -> (s0 * 16)>
#map1 = affine_map<()[s0, s1] -> (s0 * 16 + s1)>
#map2 = affine_map<()[s0, s1] -> (s0 * 64 + s1)>
module {
  func.func @matmul_kernel_0d1d2d34567c89c1011c(%arg0: memref<*xf16> {tt.divisibility = 16 : i32}, %arg1: memref<*xf16> {tt.divisibility = 16 : i32}, %arg2: memref<*xf16> {tt.divisibility = 16 : i32}, %arg3: i32, %arg4: i32, %arg5: i32, %arg6: i32, %arg7: i32, %arg8: i32, %arg9: i32, %arg10: i32, %arg11: i32, %arg12: i32, %arg13: i32, %arg14: i32) attributes {arm_sme.tiles_in_use = 34952 : i32} {
    %cst = arith.constant dense<0.000000e+00> : vector<[4]xf16>
    %c-1 = arith.constant -1 : index
    %cst_0 = arith.constant dense<false> : vector<2x[4]xi1>
    %c2 = arith.constant 2 : index
    %c4 = arith.constant 4 : index
    %c8_i32 = arith.constant 8 : i32
    %c32_i32 = arith.constant 32 : i32
    %c64_i32 = arith.constant 64 : i32
    %c16_i32 = arith.constant 16 : i32
    %cst_1 = arith.constant 0.000000e+00 : f32
    %c0_i32 = arith.constant 0 : i32
    %c1_i32 = arith.constant 1 : i32
    %c31_i32 = arith.constant 31 : i32
    %c63_i32 = arith.constant 63 : i32
    %c15_i32 = arith.constant 15 : i32
    %c0 = arith.constant 0 : index
    %c1 = arith.constant 1 : index
    %c16 = arith.constant 16 : index
    %cst_2 = arith.constant 0.000000e+00 : f16
    %c32 = arith.constant 32 : index
    %c64 = arith.constant 64 : index
    %alloc = memref.alloc() {alignment = 64 : i64} : memref<32x64xf32>
    scf.for %arg15 = %c0 to %c32 step %c1 {
      scf.for %arg16 = %c0 to %c64 step %c1 {
        memref.store %cst_1, %alloc[%arg15, %arg16] : memref<32x64xf32>
      }
    }
    %0 = arith.addi %arg3, %c31_i32 : i32
    %1 = arith.divsi %0, %c32_i32 : i32
    %2 = arith.addi %arg4, %c63_i32 : i32
    %3 = arith.divsi %2, %c64_i32 : i32
    %4 = arith.muli %3, %c8_i32 : i32
    %5 = arith.divsi %arg12, %4 : i32
    %6 = arith.muli %5, %c8_i32 : i32
    %7 = arith.subi %1, %6 : i32
    %8 = arith.minsi %7, %c8_i32 : i32
    %9 = arith.remsi %arg12, %8 : i32
    %10 = arith.addi %6, %9 : i32
    %11 = arith.remsi %arg12, %4 : i32
    %12 = arith.divsi %11, %8 : i32
    %13 = arith.muli %10, %c32_i32 : i32
    %14 = arith.index_cast %13 : i32 to index
    %15 = arith.muli %12, %c64_i32 : i32
    %16 = arith.index_cast %15 : i32 to index
    %17 = arith.index_cast %arg3 : i32 to index
    %18 = arith.index_cast %arg6 : i32 to index
    %19 = arith.muli %14, %18 : index
    %20 = arith.muli %17, %18 : index
    %21 = arith.index_cast %arg7 : i32 to index
    %22 = arith.index_cast %arg4 : i32 to index
    %23 = arith.addi %arg5, %c15_i32 : i32
    %24 = arith.divsi %23, %c16_i32 : i32
    %25 = arith.muli %arg7, %c16_i32 : i32
    %26 = arith.index_cast %25 : i32 to index
    %alloc_3 = memref.alloc() {alignment = 64 : i64} : memref<32x64xf32>
    memref.copy %alloc, %alloc_3 : memref<32x64xf32> to memref<32x64xf32>
    %27:3 = scf.for %arg15 = %c0_i32 to %24 step %c1_i32 iter_args(%arg16 = %alloc_3, %arg17 = %19, %arg18 = %c0) -> (memref<32x64xf32>, index, index)  : i32 {
      %39 = arith.addi %arg18, %16 : index
      %40 = arith.remsi %39, %22 : index
      %41 = arith.subi %39, %40 : index
      %42 = arith.addi %40, %c64 : index
      %43 = arith.minsi %42, %22 : index
      %44 = arith.subi %43, %40 : index
      %reinterpret_cast_7 = memref.reinterpret_cast %arg1 to offset: [%39], sizes: [%c16, %44], strides: [%21, %c1] : memref<*xf16> to memref<16x?xf16, strided<[?, ?], offset: ?>>
      %45 = arith.subi %c64, %44 : index
      %reinterpret_cast_8 = memref.reinterpret_cast %arg1 to offset: [%41], sizes: [%c16, %45], strides: [%21, %c1] : memref<*xf16> to memref<16x?xf16, strided<[?, ?], offset: ?>>
      %46 = arith.remsi %arg17, %18 : index
      %47 = arith.addi %20, %46 : index
      %48 = arith.subi %47, %arg17 : index
      %49 = arith.divsi %48, %18 : index
      %reinterpret_cast_9 = memref.reinterpret_cast %arg0 to offset: [%arg17], sizes: [%49, %c16], strides: [%18, %c1] : memref<*xf16> to memref<?x16xf16, strided<[?, ?], offset: ?>>
      %50 = arith.subi %c32, %49 : index
      %reinterpret_cast_10 = memref.reinterpret_cast %arg0 to offset: [%46], sizes: [%50, %c16], strides: [%18, %c1] : memref<*xf16> to memref<?x16xf16, strided<[?, ?], offset: ?>>
      %51 = arith.muli %arg15, %c16_i32 : i32
      %52 = arith.subi %arg5, %51 : i32
      %53 = arith.index_cast %52 : i32 to index
      %54 = arith.minsi %53, %c16 : index
      %alloc_11 = memref.alloc() : memref<32x16xf16>
      %55 = arith.cmpi slt, %54, %c16 : index
      scf.if %55 {
        scf.for %arg19 = %c0 to %c32 step %c1 {
          scf.for %arg20 = %c0 to %c16 step %c1 {
            memref.store %cst_2, %alloc_11[%arg19, %arg20] : memref<32x16xf16>
          }
        }
      }
      %56 = arith.minsi %49, %c32 : index
      %57 = arith.subi %c32, %56 : index
      %base_buffer_12, %offset_13, %sizes_14:2, %strides_15:2 = memref.extract_strided_metadata %reinterpret_cast_9 : memref<?x16xf16, strided<[?, ?], offset: ?>> -> memref<f16>, index, index, index, index, index
      %reinterpret_cast_16 = memref.reinterpret_cast %base_buffer_12 to offset: [%offset_13], sizes: [%56, %54], strides: [%strides_15#0, %strides_15#1] : memref<f16> to memref<?x?xf16, strided<[?, ?], offset: ?>>
      %base_buffer_17, %offset_18, %sizes_19:2, %strides_20:2 = memref.extract_strided_metadata %reinterpret_cast_10 : memref<?x16xf16, strided<[?, ?], offset: ?>> -> memref<f16>, index, index, index, index, index
      %reinterpret_cast_21 = memref.reinterpret_cast %base_buffer_17 to offset: [%offset_18], sizes: [%57, %54], strides: [%strides_20#0, %strides_20#1] : memref<f16> to memref<?x?xf16, strided<[?, ?], offset: ?>>
      %reinterpret_cast_22 = memref.reinterpret_cast %alloc_11 to offset: [0], sizes: [%56, %54], strides: [16, 1] : memref<32x16xf16> to memref<?x?xf16, strided<[16, 1]>>
      %58 = affine.apply #map()[%56]
      %reinterpret_cast_23 = memref.reinterpret_cast %alloc_11 to offset: [%58], sizes: [%57, %54], strides: [16, 1] : memref<32x16xf16> to memref<?x?xf16, strided<[16, 1], offset: ?>>
      memref.copy %reinterpret_cast_16, %reinterpret_cast_22 : memref<?x?xf16, strided<[?, ?], offset: ?>> to memref<?x?xf16, strided<[16, 1]>>
      memref.copy %reinterpret_cast_21, %reinterpret_cast_23 : memref<?x?xf16, strided<[?, ?], offset: ?>> to memref<?x?xf16, strided<[16, 1], offset: ?>>
      %alloc_24 = memref.alloc() : memref<16x64xf16>
      %59 = arith.cmpi slt, %54, %c16 : index
      scf.if %59 {
        scf.for %arg19 = %c0 to %c16 step %c1 {
          scf.for %arg20 = %c0 to %c64 step %c1 {
            memref.store %cst_2, %alloc_24[%arg19, %arg20] : memref<16x64xf16>
          }
        }
      }
      %60 = arith.minsi %44, %c64 : index
      %61 = arith.subi %c64, %60 : index
      %base_buffer_25, %offset_26, %sizes_27:2, %strides_28:2 = memref.extract_strided_metadata %reinterpret_cast_7 : memref<16x?xf16, strided<[?, ?], offset: ?>> -> memref<f16>, index, index, index, index, index
      %reinterpret_cast_29 = memref.reinterpret_cast %base_buffer_25 to offset: [%offset_26], sizes: [%54, %60], strides: [%strides_28#0, %strides_28#1] : memref<f16> to memref<?x?xf16, strided<[?, ?], offset: ?>>
      %base_buffer_30, %offset_31, %sizes_32:2, %strides_33:2 = memref.extract_strided_metadata %reinterpret_cast_8 : memref<16x?xf16, strided<[?, ?], offset: ?>> -> memref<f16>, index, index, index, index, index
      %reinterpret_cast_34 = memref.reinterpret_cast %base_buffer_30 to offset: [%offset_31], sizes: [%54, %61], strides: [%strides_33#0, %strides_33#1] : memref<f16> to memref<?x?xf16, strided<[?, ?], offset: ?>>
      %reinterpret_cast_35 = memref.reinterpret_cast %alloc_24 to offset: [0], sizes: [%54, %60], strides: [64, 1] : memref<16x64xf16> to memref<?x?xf16, strided<[64, 1]>>
      %reinterpret_cast_36 = memref.reinterpret_cast %alloc_24 to offset: [%60], sizes: [%54, %61], strides: [64, 1] : memref<16x64xf16> to memref<?x?xf16, strided<[64, 1], offset: ?>>
      memref.copy %reinterpret_cast_29, %reinterpret_cast_35 : memref<?x?xf16, strided<[?, ?], offset: ?>> to memref<?x?xf16, strided<[64, 1]>>
      memref.copy %reinterpret_cast_34, %reinterpret_cast_36 : memref<?x?xf16, strided<[?, ?], offset: ?>> to memref<?x?xf16, strided<[64, 1], offset: ?>>
      %vscale = vector.vscale
      %62 = arith.muli %vscale, %c4 : index
      %63 = arith.muli %vscale, %c4 : index
      %alloc_37 = memref.alloc() {alignment = 64 : i64} : memref<32x64xf32>
      memref.copy %alloc, %alloc_37 : memref<32x64xf32> to memref<32x64xf32>
      scf.for %arg19 = %c0 to %c32 step %62 {
        scf.for %arg20 = %c0 to %c64 step %63 {
          scf.for %arg21 = %c0 to %c16 step %c2 {
            %alloca = memref.alloca() : memref<vector<2x[4]xf16>>
            %alloca_38 = memref.alloca() : memref<vector<2x[4]xi1>>
            %alloca_39 = memref.alloca() : memref<vector<2x[4]xf16>>
            %alloca_40 = memref.alloca() : memref<vector<2x[4]xi1>>
            %66 = arith.muli %arg19, %c-1 : index
            %67 = arith.addi %66, %c32 : index
            %68 = arith.minsi %67, %62 : index
            %69 = arith.muli %arg20, %c-1 : index
            %70 = arith.addi %69, %c64 : index
            %71 = arith.minsi %70, %63 : index
            %72 = arith.muli %arg19, %c-1 : index
            %73 = arith.addi %72, %c32 : index
            %74 = arith.minsi %73, %62 : index
            %75 = arith.muli %arg20, %c-1 : index
            %76 = arith.addi %75, %c64 : index
            %77 = arith.minsi %76, %63 : index
            %78 = affine.apply #map1()[%arg19, %arg21]
            %reinterpret_cast_41 = memref.reinterpret_cast %alloc_11 to offset: [%78], sizes: [%68, 2], strides: [16, 1] : memref<32x16xf16> to memref<?x2xf16, strided<[16, 1], offset: ?>>
            %79 = affine.apply #map2()[%arg21, %arg20]
            %reinterpret_cast_42 = memref.reinterpret_cast %alloc_24 to offset: [%79], sizes: [2, %71], strides: [64, 1] : memref<16x64xf16> to memref<2x?xf16, strided<[64, 1], offset: ?>>
            %80 = affine.apply #map2()[%arg19, %arg20]
            %reinterpret_cast_43 = memref.reinterpret_cast %alloc_37 to offset: [%80], sizes: [%74, %77], strides: [64, 1] : memref<32x64xf32> to memref<?x?xf32, strided<[64, 1], offset: ?>>
            %81 = vector.create_mask %68, %c2 : vector<[4]x2xi1>
            %82 = vector.create_mask %71 : vector<[4]xi1>
            %83 = vector.insert %82, %cst_0 [0] : vector<[4]xi1> into vector<2x[4]xi1>
            %84 = vector.insert %82, %83 [1] : vector<[4]xi1> into vector<2x[4]xi1>
            memref.store %84, %alloca_38[] : memref<vector<2x[4]xi1>>
            %85 = vector.type_cast %alloca : memref<vector<2x[4]xf16>> to memref<2xvector<[4]xf16>>
            %86 = vector.type_cast %alloca_38 : memref<vector<2x[4]xi1>> to memref<2xvector<[4]xi1>>
            scf.for %arg22 = %c0 to %c2 step %c1 {
              %121 = memref.load %86[%arg22] : memref<2xvector<[4]xi1>>
              %122 = vector.transfer_read %reinterpret_cast_42[%arg22, %c0], %cst_2, %121 {in_bounds = [true]} : memref<2x?xf16, strided<[64, 1], offset: ?>>, vector<[4]xf16>
              memref.store %122, %85[%arg22] : memref<2xvector<[4]xf16>>
            }
            %87 = memref.load %alloca[] : memref<vector<2x[4]xf16>>
            %88 = arm_sme.zero {tile_id = 0 : i32} : vector<[4]x[4]xf32>
            %vscale_44 = vector.vscale
            %89 = arith.muli %vscale_44, %c4 : index
            %90 = arith.index_cast %68 : index to i64
            %91 = arith.index_cast %89 : index to i64
            %92 = arith.minsi %90, %91 : i64
            %93 = arith.index_cast %92 : i64 to index
            %94 = vector.create_mask %71 : vector<[4]xi1>
            %95 = scf.for %arg22 = %c0 to %93 step %c1 iter_args(%arg23 = %88) -> (vector<[4]x[4]xf32>) {
              %121 = arm_sme.load_tile_slice %reinterpret_cast_43[%arg22, %c0], %94, %arg23, %arg22 {tile_id = 0 : i32} : memref<?x?xf32, strided<[64, 1], offset: ?>>, vector<[4]xi1>, vector<[4]x[4]xf32>
              scf.yield %121 : vector<[4]x[4]xf32>
            }
            %vscale_45 = vector.vscale
            %96 = arith.muli %vscale_45, %c4 : index
            %subview = memref.subview %reinterpret_cast_41[%c0, %c0] [%96, %c2] [%c1, %c1] : memref<?x2xf16, strided<[16, 1], offset: ?>> to memref<?x?xf16, strided<[?, ?], offset: ?>>
            %97 = vector.transpose %81, [1, 0] : vector<[4]x2xi1> to vector<2x[4]xi1>
            %transpose = memref.transpose %subview (d0, d1) -> (d1, d0) : memref<?x?xf16, strided<[?, ?], offset: ?>> to memref<?x?xf16, strided<[?, ?], offset: ?>>
            memref.store %97, %alloca_40[] : memref<vector<2x[4]xi1>>
            %98 = vector.type_cast %alloca_39 : memref<vector<2x[4]xf16>> to memref<2xvector<[4]xf16>>
            %99 = vector.type_cast %alloca_40 : memref<vector<2x[4]xi1>> to memref<2xvector<[4]xi1>>
            scf.for %arg22 = %c0 to %c2 step %c1 {
              %121 = memref.load %99[%arg22] : memref<2xvector<[4]xi1>>
              %vscale_48 = vector.vscale
              %122 = arith.muli %vscale_48, %c4 : index
              %123 = scf.for %arg23 = %c0 to %122 step %c1 iter_args(%arg24 = %cst) -> (vector<[4]xf16>) {
                %124 = vector.extractelement %121[%arg23 : index] : vector<[4]xi1>
                %125 = scf.if %124 -> (vector<[4]xf16>) {
                  %126 = memref.load %transpose[%arg22, %arg23] : memref<?x?xf16, strided<[?, ?], offset: ?>>
                  %127 = vector.insertelement %126, %arg24[%arg23 : index] : vector<[4]xf16>
                  scf.yield %127 : vector<[4]xf16>
                } else {
                  scf.yield %arg24 : vector<[4]xf16>
                }
                scf.yield %125 : vector<[4]xf16>
              }
              memref.store %123, %98[%arg22] : memref<2xvector<[4]xf16>>
            }
            %100 = memref.load %alloca_39[] : memref<vector<2x[4]xf16>>
            %101 = vector.extract %100[0] : vector<[4]xf16> from vector<2x[4]xf16>
            %102 = vector.extract %87[0] : vector<[4]xf16> from vector<2x[4]xf16>
            %103 = vector.create_mask %68 : vector<[4]xi1>
            %104 = vector.create_mask %71 : vector<[4]xi1>
            %105 = vector.extract %100[1] : vector<[4]xf16> from vector<2x[4]xf16>
            %106 = vector.extract %87[1] : vector<[4]xf16> from vector<2x[4]xf16>
            %107 = vector.create_mask %68 : vector<[4]xi1>
            %108 = vector.create_mask %71 : vector<[4]xi1>
            %109 = "llvm.intr.experimental.vector.interleave2"(%101, %105) : (vector<[4]xf16>, vector<[4]xf16>) -> vector<[8]xf16>
            %110 = "llvm.intr.experimental.vector.interleave2"(%102, %106) : (vector<[4]xf16>, vector<[4]xf16>) -> vector<[8]xf16>
            %111 = "llvm.intr.experimental.vector.interleave2"(%103, %107) : (vector<[4]xi1>, vector<[4]xi1>) -> vector<[8]xi1>
            %112 = "llvm.intr.experimental.vector.interleave2"(%104, %108) : (vector<[4]xi1>, vector<[4]xi1>) -> vector<[8]xi1>
            %113 = arm_sme.fmopa_2way %109, %110 acc(%95) masks(%111, %112) {tile_id = 0 : i32} : vector<[8]xf16>, vector<[8]xf16> into vector<[4]x[4]xf32>
            %vscale_46 = vector.vscale
            %114 = arith.muli %vscale_46, %c4 : index
            %115 = arith.index_cast %68 : index to i64
            %116 = arith.index_cast %114 : index to i64
            %117 = arith.minsi %115, %116 : i64
            %118 = arith.index_cast %117 : i64 to index
            %119 = vector.create_mask %71 : vector<[4]xi1>
            scf.for %arg22 = %c0 to %118 step %c1 {
              arm_sme.store_tile_slice %113, %arg22, %119, %reinterpret_cast_43[%arg22, %c0] {tile_id = 0 : i32} : memref<?x?xf32, strided<[64, 1], offset: ?>>, vector<[4]xi1>, vector<[4]x[4]xf32>
            }
            %120 = affine.apply #map2()[%arg19, %arg20]
            %reinterpret_cast_47 = memref.reinterpret_cast %alloc_37 to offset: [%120], sizes: [%74, %77], strides: [64, 1] : memref<32x64xf32> to memref<?x?xf32, strided<[64, 1], offset: ?>>
            memref.copy %reinterpret_cast_43, %reinterpret_cast_47 : memref<?x?xf32, strided<[64, 1], offset: ?>> to memref<?x?xf32, strided<[64, 1], offset: ?>>
          }
        }
      }
      scf.for %arg19 = %c0 to %c32 step %c1 {
        scf.for %arg20 = %c0 to %c64 step %c1 {
          %66 = memref.load %alloc_37[%arg19, %arg20] : memref<32x64xf32>
          %67 = memref.load %arg16[%arg19, %arg20] : memref<32x64xf32>
          %68 = arith.addf %66, %67 : f32
          memref.store %68, %alloc_37[%arg19, %arg20] : memref<32x64xf32>
        }
      }
      %64 = arith.addi %arg17, %c16 : index
      %65 = arith.addi %arg18, %26 : index
      scf.yield %alloc_37, %64, %65 : memref<32x64xf32>, index, index
    }
    %28 = arith.index_cast %arg8 : i32 to index
    %29 = arith.muli %14, %28 : index
    %30 = arith.addi %29, %16 : index
    %reinterpret_cast = memref.reinterpret_cast %arg2 to offset: [%30], sizes: [32, 64], strides: [%28, 1] : memref<*xf16> to memref<32x64xf16, strided<[?, 1], offset: ?>>
    %alloc_4 = memref.alloc() {alignment = 64 : i64} : memref<32x64xf16>
    scf.for %arg15 = %c0 to %c32 step %c1 {
      scf.for %arg16 = %c0 to %c64 step %c1 {
        %39 = memref.load %27#0[%arg15, %arg16] : memref<32x64xf32>
        %40 = arith.truncf %39 : f32 to f16
        memref.store %40, %alloc_4[%arg15, %arg16] : memref<32x64xf16>
      }
    }
    %31 = arith.addi %14, %c32 : index
    %32 = arith.minsi %31, %17 : index
    %33 = arith.subi %32, %14 : index
    %34 = arith.addi %16, %c64 : index
    %35 = arith.minsi %34, %22 : index
    %36 = arith.subi %35, %16 : index
    %37 = arith.minsi %33, %c32 : index
    %38 = arith.minsi %36, %c64 : index
    %reinterpret_cast_5 = memref.reinterpret_cast %alloc_4 to offset: [0], sizes: [%37, %38], strides: [64, 1] : memref<32x64xf16> to memref<?x?xf16, strided<[64, 1]>>
    %base_buffer, %offset, %sizes:2, %strides:2 = memref.extract_strided_metadata %reinterpret_cast : memref<32x64xf16, strided<[?, 1], offset: ?>> -> memref<f16>, index, index, index, index, index
    %reinterpret_cast_6 = memref.reinterpret_cast %base_buffer to offset: [%offset], sizes: [%37, %38], strides: [%strides#0, 1] : memref<f16> to memref<?x?xf16, strided<[?, 1], offset: ?>>
    memref.copy %reinterpret_cast_5, %reinterpret_cast_6 : memref<?x?xf16, strided<[64, 1]>> to memref<?x?xf16, strided<[?, 1], offset: ?>>
    return
  }
}

[0m
